#---- Relopr ----# 
# =
\u003d=token.Relopr.EQ 
# /=
\u002F\u003d=token.Relopr.NE
# <
\u003C=token.Relopr.LT
# >
\u003E=token.Relopr.GT
# <=
\u003C\u003d=token.Relopr.LE
# >=
\u003E\u003d=token.Relopr.GE

#---- Multopr ----# 
# *
\u002A=token.Multopr.TIMES
divE=token.Multopr.DIV_E
modE=token.Multopr.MOD_E
divT=token.Multopr.DIV_T
modT=token.Multopr.MOD_T
divF=token.Multopr.DIV_F
modF=token.Multopr.MOD_F

#---- Addopr ----# 
# +
\u002B=token.Addopr.PLUS
# -
\u002D=token.Addopr.MINUS

#---- Boolopr ----# 
# &&
\u0026\u0026=token.Boolopr.AND
# ||
\u007C\u007C=token.Boolopr.OR
# &?
\u0026\u003F=token.Boolopr.CAND
# |?
\u007C\u003F=token.Boolopr.COR

#---- Changemode ----# 
const=token.Changemode.CONST
var=token.Changemode.VAR

#---- Mechmode ----# 
copy=token.Mechmode.COPY
ref=token.Mechmode.REF

#---- Type ----# 
bool=token.Type.BOOL
int64=token.Type.INT64

#---- Token ----# 
# (
\u0028=token.Token.LPAREN
# )
\u0029=token.Token.RPAREN
# ,
\u002C=token.Token.COMMA
# ;
\u003B=token.Token.SEMICOLON
# :
\u003A=token.Token.COLON
# :=
\u003A\u003d=token.Token.BECOMES

call=token.Token.CALL
debugin=token.Token.DEBUGIN
debugout=token.Token.DEBUGOUT
do=token.Token.DO
else=token.Token.ELSE
endfun=token.Token.ENDFUN
endif=token.Token.ENDIF
endproc=token.Token.ENDPROC
endprogram=token.Token.ENDPROGRAM
endwhile=token.Token.ENDWHILE
fun=token.Token.FUN
global=token.Token.GLOBAL
if=token.Token.IF
init=token.Token.INIT
local=token.Token.LOCAL
not=token.Token.NOTOPR
proc=token.Token.PROC
program=token.Token.PROGRAM
returns=token.Token.RETURNS
skip=token.Token.SKIP
then=token.Token.THEN
while=token.Token.WHILE
sentinel=token.Token.SENTINEL
# Case commands
switch=token.Token.SWITCH
endswitch=token.Token.ENDSWITCH
case=token.Token.CASE
defaultcase=token.Token.DEFAULTCASE
endcase=token.Token.ENDCASE
# conditional expression
\u003F=token.Token.QUESTIONMARK
